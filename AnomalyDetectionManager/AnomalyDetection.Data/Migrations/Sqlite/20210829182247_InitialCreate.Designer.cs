// <auto-generated />
using System;
using AnomalyDetection.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AnomalyDetection.Data.Migrations.Sqlite
{
    [DbContext(typeof(ManagerContext))]
    [Migration("20210829182247_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("AnomalyDetection.Data.Model.Db.DbDatasource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatasourceType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Datasources");
                });

            modelBuilder.Entity("AnomalyDetection.Data.Model.Db.DbMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DatasourceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TrainingSchedule")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DatasourceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("AnomalyDetection.Data.Model.Db.DbTrainingJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MetricId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetricId");

                    b.ToTable("TrainingJobs");
                });

            modelBuilder.Entity("AnomalyDetection.Data.Model.Db.DbMetric", b =>
                {
                    b.HasOne("AnomalyDetection.Data.Model.Db.DbDatasource", "Datasource")
                        .WithMany("Metrics")
                        .HasForeignKey("DatasourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Datasource");
                });

            modelBuilder.Entity("AnomalyDetection.Data.Model.Db.DbTrainingJob", b =>
                {
                    b.HasOne("AnomalyDetection.Data.Model.Db.DbMetric", "Metric")
                        .WithMany()
                        .HasForeignKey("MetricId");

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("AnomalyDetection.Data.Model.Db.DbDatasource", b =>
                {
                    b.Navigation("Metrics");
                });
#pragma warning restore 612, 618
        }
    }
}
